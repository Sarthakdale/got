class ChainingHashTable:
    def __init__(self, size, with_replacement=True):
        self.size = size
        self.table = [[] for _ in range(size)]
        self.with_replacement = with_replacement

    def hash_function(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        index = self.hash_function(key)
        if self.with_replacement:
            for i, (k, v) in enumerate(self.table[index]):
                if k == key:
                    self.table[index][i] = (key, value)  # Replace existing value
                    return
        self.table[index].append((key, value))  # Insert new key-value pair

    def find(self, key):
        index = self.hash_function(key)
        for k, v in self.table[index]:
            if k == key:
                return v
        return None

    def delete(self, key):
        index = self.hash_function(key)
        for i, (k, v) in enumerate(self.table[index]):
            if k == key:
                del self.table[index][i]
                return True
        return False

    def display(self):
        print("\nHash Table Contents:")
        for i, bucket in enumerate(self.table):
            print(f"Index {i}: {bucket}")


# User Input for Dictionary Data
size = int(input("Enter hash table size: "))
with_replacement = input("Use replacement policy (yes/no)? ").strip().lower() == "yes"

# Initialize hash table
hash_table = ChainingHashTable(size, with_replacement)

while True:
    print("\nOperations:\n1. Insert\n2. Find\n3. Delete\n4. Display\n5. Exit")
    choice = input("Enter choice: ")

    if choice == "1":
        key = input("Enter key (comparable & unique): ")
        value = input("Enter value: ")
        hash_table.insert(key, value)
        print(f"Inserted ({key}, {value})")

    elif choice == "2":
        key = input("Enter key to find: ")
        result = hash_table.find(key)
        print(f"Found: {result}" if result is not None else "Key not found")

    elif choice == "3":
        key = input("Enter key to delete: ")
        success = hash_table.delete(key)
        print("Deleted successfully" if success else "Key not found")

    elif choice == "4":
        hash_table.display()

    elif choice == "5":
        print("Exiting...")
        break

    else:
        print("Invalid choice, try again.")
