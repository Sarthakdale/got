#include <iostream>

using namespace std;

// Define BST Node
class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int value) {
        data = value;
        left = right = nullptr;
    }
};

// Insert a node into BST
Node* insert(Node* root, int value) {
    if (!root) return new Node(value);
    if (value < root->data)
        root->left = insert(root->left, value);
    else
        root->right = insert(root->right, value);
    return root;
}

// Find the longest path (tree height)
int longestPath(Node* root) {
    if (!root) return 0;
    return 1 + max(longestPath(root->left), longestPath(root->right));
}

// Find the minimum value node in BST
int findMin(Node* root) {
    while (root->left) root = root->left;
    return root->data;
}

// Mirror the tree (swap left & right pointers)
void mirror(Node* root) {
    if (!root) return;
    swap(root->left, root->right);
    mirror(root->left);
    mirror(root->right);
}

// Search for a value in BST
bool search(Node* root, int value) {
    if (!root) return false;
    if (root->data == value) return true;
    return value < root->data ? search(root->left, value) : search(root->right, value);
}

// Inorder traversal to print BST
void inorder(Node* root) {
    if (!root) return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

int main() {
    Node* root = nullptr;
    int n, value;
    
    // User input for BST construction
    cout << "Enter number of nodes: ";
    cin >> n;

    cout << "Enter " << n << " values to construct BST: ";
    for (int i = 0; i < n; i++) {
        cin >> value;
        root = insert(root, value);
    }

    // Printing BST
    cout << "\nBST Inorder Traversal: ";
    inorder(root);
    cout << endl;

    // Insert new node
    cout << "Enter value to insert: ";
    cin >> value;
    root = insert(root, value);
    cout << "\nBST after insertion (Inorder Traversal): ";
    inorder(root);
    cout << endl;

    // Find longest path (height)
    cout << "Longest path (height): " << longestPath(root) << endl;

    // Find minimum value
    cout << "Minimum value in BST: " << findMin(root) << endl;

    // Mirror the BST
    mirror(root);
    cout << "BST after mirroring (Inorder Traversal): ";
    inorder(root);
    cout << endl;

    // Search for a value
    cout << "Enter value to search: ";
    cin >> value;
    cout << (search(root, value) ? "Value found!" : "Value not found!") << endl;

    return 0;
}
